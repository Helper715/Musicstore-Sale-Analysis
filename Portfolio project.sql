create table album (
    album_id character varying(50) NOT NULL primary key,
    title character varying(120),
    artist_id character varying(30)
)
select * from album
-------------------------------------------------------------------------------------------
create table artist (
    artist_id character varying(50) NOT NULL primary key,
    "name" character varying(120)
)
select * from artist
-------------------------------------------------------------------------------------------
create table customer (
    customer_id Character varying NOT NULL primary key,
    first_name character(50),
    last_name character(50),
    company character varying(120),
    address character varying(120),
    city character varying(50),
    "state" character varying(50),
    country character varying(50),
    postal_code character varying(50),
    phone character varying(50),
    fax character varying(50),
    email character varying(50),
    support_rep_id Character varying(50)
)
select * from customer 
------------------------------------------------------------------------------------------
create table employee (
    employee_id character varying(50) NOT NULL primary key,
    last_name character(50),
    first_name character(50),
    title character varying(50),
    reports_to character varying(30),
    levels character varying(10),
    birth_date character varying(50),
    hire_date character varying(50),
    address character varying(120),
    city character varying(50),
    "state" character varying(50),
    country character varying(30),
    postal_code character varying(30),
    phone character varying(30),
    fax character varying(30),
    email character varying(30)
)
select * from employee	
-----------------------------------------------------------------------------------------
create table genre (
    genre_id character varying(50) NOT NULL primary key,
    "name" character varying(120)
)	
select * from genre
----------------------------------------------------------------------------------------
create table invoice (
    invoice_id character varying NOT NULL primary key,
    customer_id character varying,
    invoice_date character varying(50),
    billing_address character varying(120),
    billing_city character varying(30),
    billing_state character varying(30),
    billing_country character varying(30),
    billing_postal character varying(30),
    total numeric		
) 
select * from invoice

alter table invoice
add column invoice_date1 date ;
update invoice
set invoice_date1= To_Date(LEFT(invoice_date, 10), 'MM/DD/YYYY')
-------------------------------------------------------------------------------------------
create table invoice_line (
    invoice_line_id character varying NOT NULL primary key,
    invoice_id character varying,
    track_id character varying,
    unit_price numeric,
    quantity numeric
)
select * from invoice_line
----------------------------------------------------------------------------------------
create table media_type (
    media_type_id character varying(50) NOT NULL primary key,
    "name" character varying(120)
)
select * from media_type
---------------------------------------------------------------------------------------
create table playlist (
    playlist_id character varying(50) NOT NULL primary key,
    "name" character varying(120)
)
select * from playlist
----------------------------------------------------------------------------------------
create table playlist_track (
    playlist_id character varying(50),
    track_id character varying,
	constraint plt_Pk primary key(playlist_id,track_id),
    constraint pl_fk1 foreign key (playlist_id) references playlist(playlist_id),
    constraint t_fk2 foreign key (track_id) references track(track_id)
)
select * from playlist_track 
---------------------------------------------------------------------------------------------
create table track (
    track_id character varying NOT NULL primary key,
    "name" character varying(150),
    album_id character varying(50),
    media_type_id character varying(50),
    genre_id character varying(50),
    composer character varying(190),
    milliseconds numeric,
    bytes character varying,
    unit_price numeric
)
select * from track 
--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
                                      /*ANALYSIS*/
--------------------------------------------------------------------------------------------------------------------------------
/* Q1: Total sales revenue generated by top 3 countries */

SELECT billing_country, SUM(total) AS total_revenue
FROM invoice
GROUP BY billing_country
ORDER BY total_revenue DESC
LIMIT 3;



----------------------------------------------------------------------------------------------------------------
/* Q2: which cities (with a range of total sales of $65.00 to $95.00 )from the top countries have the potential for further 
growth in sales   */

WITH TopCountries AS (
  SELECT billing_country, SUM(total) AS total_revenue
  FROM invoice
  GROUP BY billing_country
  ORDER BY total_revenue DESC
  LIMIT 3
)
SELECT 
  tc.billing_country AS country,
  i.billing_city AS city,
  SUM(i.total) AS city_total_revenue
FROM invoice i
INNER JOIN TopCountries tc ON i.billing_country = tc.billing_country
GROUP BY tc.billing_country, i.billing_city
HAVING SUM(i.total) BETWEEN 65.00 AND 95.00
ORDER BY city_total_revenue DESC;






----------------------------------------------------------------------------------------------------------------------------------------
/* Q3: Which country has the low sales revenue where $70 isn't crossed? We would like to throw a promotional Music Festival 
in the cities we made less money. */
 

SELECT billing_country, SUM(total) AS total_revenue
FROM invoice
GROUP BY billing_country
HAVING SUM(total) < 70
ORDER BY total_revenue ASC;
--------------------------------------------------------------------------------------------------------------------


/* Q4:  price of tracks affecting the Purchase rate */

WITH PricePurchaseData AS (
  SELECT
    t.unit_price AS track_price,
    COUNT(il.invoice_line_id) AS purchase_count,
    CASE
      WHEN t.unit_price < 1 THEN 'Less than $1'
      ELSE 'Greater than $1'
    END AS Track_price_group
  FROM track t
  INNER JOIN invoice_line il ON t.track_id = il.track_id
  GROUP BY t.unit_price
)
SELECT
  track_price,Track_price_group,
  purchase_count,
  ROUND((purchase_count / SUM(purchase_count) OVER ()) * 100, 2) AS purchase_rate_percentage
FROM PricePurchaseData;
-----------------------------------------------------------------------------------------------------------------

/* Q5: Artist wise sum of sales  */


SELECT artist.name AS artist_name, 
       SUM(invoice_line.unit_price * invoice_line.quantity) AS total_sales
FROM invoice_line
JOIN track ON track.track_id = invoice_line.track_id
JOIN album ON album.album_id = track.album_id
JOIN artist ON artist.artist_id = album.artist_id
GROUP BY artist.name
ORDER BY total_sales DESC
LIMIT 5;
	
------------------------------------------------------------------------------------------------------------
/*Q6: Top 5 genre wise sales*/
SELECT  genre.name, SUM(invoice_line.unit_price*invoice_line.quantity) AS total_sales  
    FROM invoice_line 
	JOIN invoice ON invoice.invoice_id = invoice_line.invoice_id
	JOIN customer ON customer.customer_id = invoice.customer_id
	JOIN track ON track.track_id = invoice_line.track_id
	JOIN genre ON genre.genre_id = track.genre_id
	GROUP BY 1
	ORDER BY  2 DESC
	limit 5

------------------------------------------------------------------------------------------------------------
/* Q7:Show yearwise sales and Percentage change */
		
WITH yearly_sales AS (                                           
    SELECT  EXTRACT(YEAR FROM invoice_date1) AS "`Year`",SUM(total) AS total_sales
    FROM invoice
    GROUP BY "`Year`"
    ORDER BY "`Year`"
)                                                         
SELECT    ys1."`Year`" AS "`Year`", ys1.total_sales AS total_sales,
    COALESCE(((ys1.total_sales - ys2.total_sales) / ys2.total_sales) * 100,Null) AS percentage_change
FROM yearly_sales ys1
LEFT JOIN yearly_sales ys2 ON ys1."`Year`" - 1 = ys2."`Year`"

-------------------------------------------------------------------------------------------------------------
/* Q8: Write a query that determines the top customer from the city(mention the country name) 
that has spent the most on music for each country.  */

/* Steps to Solve:  Similar to the above question. There are two parts in question- 
first find the most spent on music for each country and second filter the data for respective customers. */

WITH  TopSpendersPerCity AS (
  SELECT c.customer_id, c.first_name || ' ' || c.last_name AS customer_name,
         i.billing_city, i.billing_country,
         SUM(il.unit_price * il.quantity) AS total_spent_on_music
  FROM customer c
  INNER JOIN invoice i ON c.customer_id = i.customer_id
  INNER JOIN invoice_line il ON i.invoice_id = il.invoice_id
  GROUP BY c.customer_id, c.first_name, c.last_name, i.billing_city, i.billing_country
  ORDER BY i.billing_country, i.billing_city DESC, total_spent_on_music DESC  
)
, TopSpendersPerCountry AS (
  SELECT t.*,MAX(total_spent_on_music) OVER (PARTITION BY billing_country, billing_city) AS max_spent_in_city
  FROM TopSpendersPerCity t
)
SELECT customer_name, billing_city, billing_country, total_spent_on_music
FROM TopSpendersPerCountry
WHERE total_spent_on_music = max_spent_in_city  
ORDER BY total_spent_on_music DESC
LIMIT 5;
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
/* Additional */


/*Purchase count*/

SELECT COUNT(*) AS total_purchases
FROM invoice_line;


/* popular albums */

SELECT album.title, SUM(invoice_line.unit_price * invoice_line.quantity) AS total_sales
FROM invoice_line
INNER JOIN track ON invoice_line.track_id = track.track_id
INNER JOIN album ON track.album_id = album.album_id 
GROUP BY album.title
ORDER BY total_sales DESC
LIMIT 10;

---------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------XXX-----------------------------------------------------------------------